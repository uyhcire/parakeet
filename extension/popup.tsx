import React from "react";
import ReactDOM from "react-dom";

import Engine from "./engine";
import "./popup.css";
import "./tailwind.css";

// Generated by https://app.brandmark.io/v3/
const logo = new URL("logo.svg", import.meta.url);

const useApiKeyInStorage = (): {
  apiKey: string | null;
  apiKeyStatus: "VALID" | "INVALID" | "UNKNOWN";
  setApiKey: (newApiKey: string) => void;
} => {
  const [apiKey_, setApiKey_] = React.useState<string | null>(null);
  const [apiKeyStatus, setApiKeyStatus] = React.useState<
    "VALID" | "INVALID" | "UNKNOWN"
  >("UNKNOWN");

  React.useEffect(() => {
    chrome.storage.sync.get("PARAKEET_API_KEY", (items) => {
      console.log({ items });
      const storedApiKey = items["PARAKEET_API_KEY"] ?? "";
      setApiKey(storedApiKey);
      if (storedApiKey.length > 0) {
        // If an API key has already been stored, it has already been validated
        setApiKeyStatus("VALID");
      }
    });
  }, []);

  const setApiKey = async (newApiKey: string) => {
    setApiKey_(newApiKey);
    setApiKeyStatus("UNKNOWN");

    // Validate the API key, and store it in Chrome storage if it's valid.

    if (newApiKey.length === 0) {
      return;
    }

    const engine = new Engine();
    const couldConnect = await engine.testConnection(newApiKey);
    if (couldConnect) {
      chrome.storage.sync.set({ PARAKEET_API_KEY: newApiKey }, () => {});
      setApiKeyStatus("VALID");
    } else {
      // Could not connect to the API. THe API key may be invalid.
      setApiKeyStatus("INVALID");
    }
  };

  return { apiKey: apiKey_, apiKeyStatus, setApiKey };
};

const APIKeyStatus = ({
  apiKeyStatus,
}: {
  apiKeyStatus: "VALID" | "INVALID" | "UNKNOWN";
}) => {
  if (apiKeyStatus === "VALID") {
    return <span className="text-green-400">&#10004;</span>;
  }

  if (apiKeyStatus === "INVALID") {
    return <span className="text-red-400">&#10008;</span>;
  }

  // apiKeyStatus === 'UNKNOWN'
  return null;
};

const Popup = () => {
  const { apiKey, apiKeyStatus, setApiKey } = useApiKeyInStorage();

  return (
    <div
      className="flex flex-col items-center p-12"
      style={{ width: "500px", background: "rgb(58, 71, 92)" }}
    >
      <img src={logo.toString()} alt="logo" />
      <label className="block w-full my-4 text-white">
        Engine URL{" "}
        <input
          disabled
          className="block w-full p-2 my-2 text-xs bg-gray-600 font-mono"
          type="input"
          value="api.goose.ai/v1/engines/gpt-j-6b/completions"
        />
      </label>
      <label className="block w-full my-4 text-white">
        API key<span className="px-1"> </span>
        <APIKeyStatus apiKeyStatus={apiKeyStatus} />
        <input
          className="block w-full p-2 my-2 text-xs bg-gray-500 font-mono"
          type="input"
          disabled={apiKey == null} // disable if still loading
          value={apiKey ?? ""}
          onChange={(e) => {
            setApiKey(e.target.value);
          }}
        />
      </label>
    </div>
  );
};

const popup = document.getElementById("popup");
ReactDOM.render(<Popup />, popup);
